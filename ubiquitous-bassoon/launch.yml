---
- hosts: local
  connection: local
  gather_facts: false
  vars:
    instance_type: t2.micro
    security_group: apache-server
    image: ami-0ff4c8fb495a5a50d
    keypair: aws-dev
    count: 1
    region: eu-west-2
  vars_files:
    - aws_keys.yml

  tasks:
     - name: Include private key from Ansible Vault encrypted file.
       include_vars: aws_keys.yml
       when: not test_mode
     - name: Create a security group
       ec2_group:
        name: "{{ security_group }}"
        description: The apache servers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
     - name: Launch the new EC2 Instance
       ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         group: "{{ security_group }}"
         instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         wait: true 
         region: "{{ region }}"
         keypair: "{{ keypair }}"
         count: "{{count}}"
       register: ec2
     - name: Add the newly created host so that we can further contact it
       add_host:
         name: "{{ item.public_ip }}"
         groups: webservers
       with_items: "{{ ec2.instances }}"
     - name: Add tag to Instance(s)
       ec2_tag:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         resource: "{{ item.id }}" 
         region: "{{ region }}" 
         state: "present"
       with_items: "{{ ec2.instances }}"
       args:
         tags:
           Type: webserver
     - name: Wait for SSH to come up
       wait_for:
         host: "{{ item.public_ip }}"
         port: 22 
         state: started 
       with_items: "{{ ec2.instances }}"
- hosts: webservers
  remote_user: ubuntu
  become: yes
  gather_facts: no
  pre_tasks:
   - name: 'install python3'
     raw: 'sudo apt-get -y install python3'
  tasks:
   - name: Install Apache
     apt:
       name: apache2
       state: present
   - service: 
       name: apache2
       state: started
       enabled: yes